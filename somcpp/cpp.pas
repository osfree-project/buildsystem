
(* lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG *)

(* global definitions: *)
// **********************************************************************
//
// Copyright (c) 2001 - 2002 MT Tools.
// Copyright (c) 2007 - 2008 osFree project.
//
// All Rights Reserved
//
// MT_DORB is based in part on the product DORB,
// written by Shadrin Victor
//
// **********************************************************************
unit cpp;
interface
uses
  Classes, SysUtils, Lexlib;

  function yylex: integer;

var
  includes : TStringList;
  defined  : TStringList;
  _enabled : array[0..100] of boolean;
  stack_pos : integer;
  disabled_at : integer;
  filename : string;

implementation

procedure include_file(const fname: string; local: boolean); forward;
function enabled : Boolean; forward;
procedure _define(val: string); forward;
procedure _undef(val: string); forward;
procedure _ifdef(val: string); forward;
procedure _if(val: string); forward;
procedure _ifndef(val: string); forward;
procedure _endif; forward;
procedure _else; forward;
procedure _print; forward;
procedure yyprintln(str: string); forward;
procedure PrintError(msg: string); forward;



const INCLUDE = 2;
const LOCAL = 4;
const FAR = 6;


function yylex : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)

begin
  (* actions: *)
  case yyruleno of
  1:
                       start(LOCAL);
  2:
                       start(FAR);
  3:
                       begin
                         include_file(copy(yytext,1,pos('"',yytext)-1),true);
                         start(0);
                       end;
  4:
                       begin
                         include_file(copy(yytext,1,pos('>',yytext)-1),false);
                         start(0);
                       end;
  5:
                             _define(trim(copy(trim(yytext),8,200)));
  6:
                             _undef(trim(copy(trim(yytext),7,200)));
  7:
                              _ifdef(trim(copy(trim(yytext),7,200)));
  8:
                                _if(trim(copy(trim(yytext),7,200)));
  9:
                             _ifndef(trim(copy(trim(yytext),8,200)));
  10:
                             _endif;
  11:
                             _else;
  12:
                             start(INCLUDE);
  13:
                       _print;
  end;
end(*yyaction*);

(* DFA table: *)

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 36;
yynmatches = 36;
yyntrans   = 250;
yynstates  = 123;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  { 1: }
  { 2: }
  { 3: }
  { 4: }
  { 5: }
  { 6: }
  { 7: }
  { 8: }
  13,
  { 9: }
  13,
  { 10: }
  13,
  { 11: }
  1,
  13,
  { 12: }
  2,
  13,
  { 13: }
  13,
  { 14: }
  13,
  { 15: }
  13,
  { 16: }
  13,
  { 17: }
  { 18: }
  { 19: }
  { 20: }
  { 21: }
  { 22: }
  { 23: }
  { 24: }
  { 25: }
  3,
  { 26: }
  { 27: }
  { 28: }
  { 29: }
  { 30: }
  { 31: }
  { 32: }
  { 33: }
  { 34: }
  { 35: }
  { 36: }
  { 37: }
  { 38: }
  { 39: }
  { 40: }
  { 41: }
  { 42: }
  4,
  { 43: }
  { 44: }
  { 45: }
  { 46: }
  { 47: }
  { 48: }
  { 49: }
  { 50: }
  { 51: }
  { 52: }
  { 53: }
  { 54: }
  { 55: }
  { 56: }
  { 57: }
  { 58: }
  { 59: }
  { 60: }
  8,
  { 61: }
  { 62: }
  { 63: }
  { 64: }
  { 65: }
  { 66: }
  { 67: }
  { 68: }
  { 69: }
  { 70: }
  { 71: }
  { 72: }
  { 73: }
  { 74: }
  { 75: }
  { 76: }
  { 77: }
  { 78: }
  { 79: }
  11,
  { 80: }
  { 81: }
  { 82: }
  { 83: }
  3,
  8,
  { 84: }
  { 85: }
  { 86: }
  { 87: }
  { 88: }
  { 89: }
  { 90: }
  { 91: }
  { 92: }
  { 93: }
  10,
  { 94: }
  { 95: }
  { 96: }
  { 97: }
  { 98: }
  { 99: }
  { 100: }
  3,
  11,
  { 101: }
  { 102: }
  6,
  { 103: }
  7,
  { 104: }
  { 105: }
  { 106: }
  { 107: }
  { 108: }
  { 109: }
  { 110: }
  { 111: }
  3,
  10,
  { 112: }
  5,
  { 113: }
  9,
  { 114: }
  12,
  { 115: }
  { 116: }
  3,
  6,
  { 117: }
  3,
  7,
  { 118: }
  { 119: }
  { 120: }
  3,
  5,
  { 121: }
  3,
  9,
  { 122: }
  12
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
{ 1: }
{ 2: }
{ 3: }
{ 4: }
{ 5: }
{ 6: }
{ 7: }
{ 8: }
  13,
{ 9: }
  13,
{ 10: }
  13,
{ 11: }
  1,
  13,
{ 12: }
  2,
  13,
{ 13: }
  13,
{ 14: }
  13,
{ 15: }
  13,
{ 16: }
  13,
{ 17: }
{ 18: }
{ 19: }
{ 20: }
{ 21: }
{ 22: }
{ 23: }
{ 24: }
{ 25: }
  3,
{ 26: }
{ 27: }
{ 28: }
{ 29: }
{ 30: }
{ 31: }
{ 32: }
{ 33: }
{ 34: }
{ 35: }
{ 36: }
{ 37: }
{ 38: }
{ 39: }
{ 40: }
{ 41: }
{ 42: }
  4,
{ 43: }
{ 44: }
{ 45: }
{ 46: }
{ 47: }
{ 48: }
{ 49: }
{ 50: }
{ 51: }
{ 52: }
{ 53: }
{ 54: }
{ 55: }
{ 56: }
{ 57: }
{ 58: }
{ 59: }
{ 60: }
  8,
{ 61: }
{ 62: }
{ 63: }
{ 64: }
{ 65: }
{ 66: }
{ 67: }
{ 68: }
{ 69: }
{ 70: }
{ 71: }
{ 72: }
{ 73: }
{ 74: }
{ 75: }
{ 76: }
{ 77: }
{ 78: }
{ 79: }
  11,
{ 80: }
{ 81: }
{ 82: }
{ 83: }
  3,
  8,
{ 84: }
{ 85: }
{ 86: }
{ 87: }
{ 88: }
{ 89: }
{ 90: }
{ 91: }
{ 92: }
{ 93: }
  10,
{ 94: }
{ 95: }
{ 96: }
{ 97: }
{ 98: }
{ 99: }
{ 100: }
  3,
  11,
{ 101: }
{ 102: }
  6,
{ 103: }
  7,
{ 104: }
{ 105: }
{ 106: }
{ 107: }
{ 108: }
{ 109: }
{ 110: }
{ 111: }
  3,
  10,
{ 112: }
  5,
{ 113: }
  9,
{ 114: }
  12,
{ 115: }
{ 116: }
  3,
  6,
{ 117: }
  3,
  7,
{ 118: }
{ 119: }
{ 120: }
  3,
  5,
{ 121: }
  3,
  9,
{ 122: }
  12
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#9,#11..#255 ]; s: 8),
{ 1: }
  ( cc: [ #1..#8,#11..#31,'!','"','$'..#255 ]; s: 8),
  ( cc: [ #9,' ' ]; s: 9),
  ( cc: [ '#' ]; s: 10),
{ 2: }
  ( cc: [ #1..#9,#11..'!','#'..';','='..#255 ]; s: 8),
  ( cc: [ '"' ]; s: 11),
  ( cc: [ '<' ]; s: 12),
{ 3: }
  ( cc: [ #1..#8,#11..#31,'!','$'..';','='..#255 ]; s: 8),
  ( cc: [ #9,' ' ]; s: 9),
  ( cc: [ '"' ]; s: 11),
  ( cc: [ '#' ]; s: 10),
  ( cc: [ '<' ]; s: 12),
{ 4: }
  ( cc: [ #1..#9,#11..#31,'!'..',',':'..'@','[',']','^',
            '`','{'..#127 ]; s: 8),
  ( cc: [ ' ','-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 13),
{ 5: }
  ( cc: [ #1..#8,#11..#31,'!','"','$'..',',':'..'@',
            '[',']','^','`','{'..#127 ]; s: 8),
  ( cc: [ #9 ]; s: 9),
  ( cc: [ ' ' ]; s: 14),
  ( cc: [ '#' ]; s: 10),
  ( cc: [ '-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 13),
{ 6: }
  ( cc: [ #1..#9,#11..#31,'!'..',',':'..'@','[',']','^',
            '`','{'..#127 ]; s: 8),
  ( cc: [ ' ','-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 15),
{ 7: }
  ( cc: [ #1..#8,#11..#31,'!','"','$'..',',':'..'@',
            '[',']','^','`','{'..#127 ]; s: 8),
  ( cc: [ #9 ]; s: 9),
  ( cc: [ ' ' ]; s: 16),
  ( cc: [ '#' ]; s: 10),
  ( cc: [ '-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 15),
{ 8: }
{ 9: }
  ( cc: [ #9,' ' ]; s: 17),
  ( cc: [ '#' ]; s: 18),
{ 10: }
  ( cc: [ 'd' ]; s: 19),
  ( cc: [ 'e' ]; s: 22),
  ( cc: [ 'i' ]; s: 21),
  ( cc: [ 'u' ]; s: 20),
{ 11: }
{ 12: }
{ 13: }
  ( cc: [ #1..#9,#11..#31,'!'..',',':'..'@','[',']','^',
            '`','{'..#127 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ','-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 23),
{ 14: }
  ( cc: [ #1..#8,#11..#31,'!','"','$'..',',':'..'@',
            '[',']','^','`','{'..#127 ]; s: 24),
  ( cc: [ #9 ]; s: 27),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ' ]; s: 26),
  ( cc: [ '#' ]; s: 28),
  ( cc: [ '-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 23),
{ 15: }
  ( cc: [ ' ','-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 29),
  ( cc: [ '>' ]; s: 30),
{ 16: }
  ( cc: [ #9 ]; s: 17),
  ( cc: [ ' ' ]; s: 31),
  ( cc: [ '#' ]; s: 18),
  ( cc: [ '-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 29),
  ( cc: [ '>' ]; s: 30),
{ 17: }
  ( cc: [ #9,' ' ]; s: 17),
  ( cc: [ '#' ]; s: 18),
{ 18: }
  ( cc: [ 'd' ]; s: 19),
  ( cc: [ 'e' ]; s: 22),
  ( cc: [ 'i' ]; s: 21),
  ( cc: [ 'u' ]; s: 20),
{ 19: }
  ( cc: [ 'e' ]; s: 32),
{ 20: }
  ( cc: [ 'n' ]; s: 33),
{ 21: }
  ( cc: [ 'f' ]; s: 34),
  ( cc: [ 'n' ]; s: 35),
{ 22: }
  ( cc: [ 'l' ]; s: 37),
  ( cc: [ 'n' ]; s: 36),
{ 23: }
  ( cc: [ #1..#9,#11..#31,'!'..',',':'..'@','[',']','^',
            '`','{'..#127 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ','-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 23),
{ 24: }
  ( cc: [ #1..#9,#11..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
{ 25: }
{ 26: }
  ( cc: [ #1..#8,#11..#31,'!','"','$'..',',':'..'@',
            '[',']','^','`','{'..#127 ]; s: 24),
  ( cc: [ #9 ]; s: 27),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ' ]; s: 26),
  ( cc: [ '#' ]; s: 28),
  ( cc: [ '-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 23),
{ 27: }
  ( cc: [ #1..#8,#11..#31,'!','"','$'..#255 ]; s: 24),
  ( cc: [ #9,' ' ]; s: 27),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ '#' ]; s: 28),
{ 28: }
  ( cc: [ #1..#9,#11..'c','f'..'h','j'..'t','v'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'd' ]; s: 38),
  ( cc: [ 'e' ]; s: 41),
  ( cc: [ 'i' ]; s: 40),
  ( cc: [ 'u' ]; s: 39),
{ 29: }
  ( cc: [ ' ','-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 29),
  ( cc: [ '>' ]; s: 30),
{ 30: }
  ( cc: [ #1..#9,#11..#255 ]; s: 30),
  ( cc: [ #10 ]; s: 42),
{ 31: }
  ( cc: [ #9 ]; s: 17),
  ( cc: [ ' ' ]; s: 31),
  ( cc: [ '#' ]; s: 18),
  ( cc: [ '-'..'9','A'..'Z','\','_','a'..'z',#128..#255 ]; s: 29),
  ( cc: [ '>' ]; s: 30),
{ 32: }
  ( cc: [ 'f' ]; s: 43),
{ 33: }
  ( cc: [ 'd' ]; s: 44),
{ 34: }
  ( cc: [ ' ' ]; s: 46),
  ( cc: [ 'd' ]; s: 45),
  ( cc: [ 'n' ]; s: 47),
{ 35: }
  ( cc: [ 'c' ]; s: 48),
{ 36: }
  ( cc: [ 'd' ]; s: 49),
{ 37: }
  ( cc: [ 's' ]; s: 50),
{ 38: }
  ( cc: [ #1..#9,#11..'d','f'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'e' ]; s: 51),
{ 39: }
  ( cc: [ #1..#9,#11..'m','o'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'n' ]; s: 52),
{ 40: }
  ( cc: [ #1..#9,#11..'e','g'..'m','o'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'f' ]; s: 53),
  ( cc: [ 'n' ]; s: 54),
{ 41: }
  ( cc: [ #1..#9,#11..'k','m','o'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'l' ]; s: 56),
  ( cc: [ 'n' ]; s: 55),
{ 42: }
{ 43: }
  ( cc: [ 'i' ]; s: 57),
{ 44: }
  ( cc: [ 'e' ]; s: 58),
{ 45: }
  ( cc: [ 'e' ]; s: 59),
{ 46: }
  ( cc: [ #1..#9,#11..#255 ]; s: 46),
  ( cc: [ #10 ]; s: 60),
{ 47: }
  ( cc: [ 'd' ]; s: 61),
{ 48: }
  ( cc: [ 'l' ]; s: 62),
{ 49: }
  ( cc: [ 'i' ]; s: 63),
{ 50: }
  ( cc: [ 'e' ]; s: 64),
{ 51: }
  ( cc: [ #1..#9,#11..'e','g'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'f' ]; s: 65),
{ 52: }
  ( cc: [ #1..#9,#11..'c','e'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'd' ]; s: 66),
{ 53: }
  ( cc: [ #1..#9,#11..#31,'!'..'c','e'..'m','o'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ' ]; s: 68),
  ( cc: [ 'd' ]; s: 67),
  ( cc: [ 'n' ]; s: 69),
{ 54: }
  ( cc: [ #1..#9,#11..'b','d'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'c' ]; s: 70),
{ 55: }
  ( cc: [ #1..#9,#11..'c','e'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'd' ]; s: 71),
{ 56: }
  ( cc: [ #1..#9,#11..'r','t'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 's' ]; s: 72),
{ 57: }
  ( cc: [ 'n' ]; s: 73),
{ 58: }
  ( cc: [ 'f' ]; s: 74),
{ 59: }
  ( cc: [ 'f' ]; s: 75),
{ 60: }
{ 61: }
  ( cc: [ 'e' ]; s: 76),
{ 62: }
  ( cc: [ 'u' ]; s: 77),
{ 63: }
  ( cc: [ 'f' ]; s: 78),
{ 64: }
  ( cc: [ #1..#9,#11..#255 ]; s: 64),
  ( cc: [ #10 ]; s: 79),
{ 65: }
  ( cc: [ #1..#9,#11..'h','j'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'i' ]; s: 80),
{ 66: }
  ( cc: [ #1..#9,#11..'d','f'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'e' ]; s: 81),
{ 67: }
  ( cc: [ #1..#9,#11..'d','f'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'e' ]; s: 82),
{ 68: }
  ( cc: [ #1..#9,#11..#255 ]; s: 68),
  ( cc: [ #10 ]; s: 83),
{ 69: }
  ( cc: [ #1..#9,#11..'c','e'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'd' ]; s: 84),
{ 70: }
  ( cc: [ #1..#9,#11..'k','m'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'l' ]; s: 85),
{ 71: }
  ( cc: [ #1..#9,#11..'h','j'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'i' ]; s: 86),
{ 72: }
  ( cc: [ #1..#9,#11..'d','f'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'e' ]; s: 87),
{ 73: }
  ( cc: [ 'e' ]; s: 88),
{ 74: }
  ( cc: [ ' ' ]; s: 89),
{ 75: }
  ( cc: [ ' ' ]; s: 90),
{ 76: }
  ( cc: [ 'f' ]; s: 91),
{ 77: }
  ( cc: [ 'd' ]; s: 92),
{ 78: }
  ( cc: [ #1..#9,#11..#255 ]; s: 78),
  ( cc: [ #10 ]; s: 93),
{ 79: }
{ 80: }
  ( cc: [ #1..#9,#11..'m','o'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'n' ]; s: 94),
{ 81: }
  ( cc: [ #1..#9,#11..'e','g'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'f' ]; s: 95),
{ 82: }
  ( cc: [ #1..#9,#11..'e','g'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'f' ]; s: 96),
{ 83: }
{ 84: }
  ( cc: [ #1..#9,#11..'d','f'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'e' ]; s: 97),
{ 85: }
  ( cc: [ #1..#9,#11..'t','v'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'u' ]; s: 98),
{ 86: }
  ( cc: [ #1..#9,#11..'e','g'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'f' ]; s: 99),
{ 87: }
  ( cc: [ #1..#9,#11..#255 ]; s: 87),
  ( cc: [ #10 ]; s: 100),
{ 88: }
  ( cc: [ ' ' ]; s: 101),
{ 89: }
  ( cc: [ #1..#9,#11..#255 ]; s: 89),
  ( cc: [ #10 ]; s: 102),
{ 90: }
  ( cc: [ #1..#9,#11..#255 ]; s: 90),
  ( cc: [ #10 ]; s: 103),
{ 91: }
  ( cc: [ ' ' ]; s: 104),
{ 92: }
  ( cc: [ 'e' ]; s: 105),
{ 93: }
{ 94: }
  ( cc: [ #1..#9,#11..'d','f'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'e' ]; s: 106),
{ 95: }
  ( cc: [ #1..#9,#11..#31,'!'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ' ]; s: 107),
{ 96: }
  ( cc: [ #1..#9,#11..#31,'!'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ' ]; s: 108),
{ 97: }
  ( cc: [ #1..#9,#11..'e','g'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'f' ]; s: 109),
{ 98: }
  ( cc: [ #1..#9,#11..'c','e'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'd' ]; s: 110),
{ 99: }
  ( cc: [ #1..#9,#11..#255 ]; s: 99),
  ( cc: [ #10 ]; s: 111),
{ 100: }
{ 101: }
  ( cc: [ #1..#9,#11..#255 ]; s: 101),
  ( cc: [ #10 ]; s: 112),
{ 102: }
{ 103: }
{ 104: }
  ( cc: [ #1..#9,#11..#255 ]; s: 104),
  ( cc: [ #10 ]; s: 113),
{ 105: }
  ( cc: [ ' ' ]; s: 114),
{ 106: }
  ( cc: [ #1..#9,#11..#31,'!'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ' ]; s: 115),
{ 107: }
  ( cc: [ #1..#9,#11..#255 ]; s: 107),
  ( cc: [ #10 ]; s: 116),
{ 108: }
  ( cc: [ #1..#9,#11..#255 ]; s: 108),
  ( cc: [ #10 ]; s: 117),
{ 109: }
  ( cc: [ #1..#9,#11..#31,'!'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ' ]; s: 118),
{ 110: }
  ( cc: [ #1..#9,#11..'d','f'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ 'e' ]; s: 119),
{ 111: }
{ 112: }
{ 113: }
{ 114: }
{ 115: }
  ( cc: [ #1..#9,#11..#255 ]; s: 115),
  ( cc: [ #10 ]; s: 120),
{ 116: }
{ 117: }
{ 118: }
  ( cc: [ #1..#9,#11..#255 ]; s: 118),
  ( cc: [ #10 ]; s: 121),
{ 119: }
  ( cc: [ #1..#9,#11..#31,'!'..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25),
  ( cc: [ ' ' ]; s: 122),
{ 120: }
{ 121: }
{ 122: }
  ( cc: [ #1..#9,#11..#255 ]; s: 24),
  ( cc: [ #10 ]; s: 25)
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 1,
{ 8: } 1,
{ 9: } 2,
{ 10: } 3,
{ 11: } 4,
{ 12: } 6,
{ 13: } 8,
{ 14: } 9,
{ 15: } 10,
{ 16: } 11,
{ 17: } 12,
{ 18: } 12,
{ 19: } 12,
{ 20: } 12,
{ 21: } 12,
{ 22: } 12,
{ 23: } 12,
{ 24: } 12,
{ 25: } 12,
{ 26: } 13,
{ 27: } 13,
{ 28: } 13,
{ 29: } 13,
{ 30: } 13,
{ 31: } 13,
{ 32: } 13,
{ 33: } 13,
{ 34: } 13,
{ 35: } 13,
{ 36: } 13,
{ 37: } 13,
{ 38: } 13,
{ 39: } 13,
{ 40: } 13,
{ 41: } 13,
{ 42: } 13,
{ 43: } 14,
{ 44: } 14,
{ 45: } 14,
{ 46: } 14,
{ 47: } 14,
{ 48: } 14,
{ 49: } 14,
{ 50: } 14,
{ 51: } 14,
{ 52: } 14,
{ 53: } 14,
{ 54: } 14,
{ 55: } 14,
{ 56: } 14,
{ 57: } 14,
{ 58: } 14,
{ 59: } 14,
{ 60: } 14,
{ 61: } 15,
{ 62: } 15,
{ 63: } 15,
{ 64: } 15,
{ 65: } 15,
{ 66: } 15,
{ 67: } 15,
{ 68: } 15,
{ 69: } 15,
{ 70: } 15,
{ 71: } 15,
{ 72: } 15,
{ 73: } 15,
{ 74: } 15,
{ 75: } 15,
{ 76: } 15,
{ 77: } 15,
{ 78: } 15,
{ 79: } 15,
{ 80: } 16,
{ 81: } 16,
{ 82: } 16,
{ 83: } 16,
{ 84: } 18,
{ 85: } 18,
{ 86: } 18,
{ 87: } 18,
{ 88: } 18,
{ 89: } 18,
{ 90: } 18,
{ 91: } 18,
{ 92: } 18,
{ 93: } 18,
{ 94: } 19,
{ 95: } 19,
{ 96: } 19,
{ 97: } 19,
{ 98: } 19,
{ 99: } 19,
{ 100: } 19,
{ 101: } 21,
{ 102: } 21,
{ 103: } 22,
{ 104: } 23,
{ 105: } 23,
{ 106: } 23,
{ 107: } 23,
{ 108: } 23,
{ 109: } 23,
{ 110: } 23,
{ 111: } 23,
{ 112: } 25,
{ 113: } 26,
{ 114: } 27,
{ 115: } 28,
{ 116: } 28,
{ 117: } 30,
{ 118: } 32,
{ 119: } 32,
{ 120: } 32,
{ 121: } 34,
{ 122: } 36
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 0,
{ 7: } 0,
{ 8: } 1,
{ 9: } 2,
{ 10: } 3,
{ 11: } 5,
{ 12: } 7,
{ 13: } 8,
{ 14: } 9,
{ 15: } 10,
{ 16: } 11,
{ 17: } 11,
{ 18: } 11,
{ 19: } 11,
{ 20: } 11,
{ 21: } 11,
{ 22: } 11,
{ 23: } 11,
{ 24: } 11,
{ 25: } 12,
{ 26: } 12,
{ 27: } 12,
{ 28: } 12,
{ 29: } 12,
{ 30: } 12,
{ 31: } 12,
{ 32: } 12,
{ 33: } 12,
{ 34: } 12,
{ 35: } 12,
{ 36: } 12,
{ 37: } 12,
{ 38: } 12,
{ 39: } 12,
{ 40: } 12,
{ 41: } 12,
{ 42: } 13,
{ 43: } 13,
{ 44: } 13,
{ 45: } 13,
{ 46: } 13,
{ 47: } 13,
{ 48: } 13,
{ 49: } 13,
{ 50: } 13,
{ 51: } 13,
{ 52: } 13,
{ 53: } 13,
{ 54: } 13,
{ 55: } 13,
{ 56: } 13,
{ 57: } 13,
{ 58: } 13,
{ 59: } 13,
{ 60: } 14,
{ 61: } 14,
{ 62: } 14,
{ 63: } 14,
{ 64: } 14,
{ 65: } 14,
{ 66: } 14,
{ 67: } 14,
{ 68: } 14,
{ 69: } 14,
{ 70: } 14,
{ 71: } 14,
{ 72: } 14,
{ 73: } 14,
{ 74: } 14,
{ 75: } 14,
{ 76: } 14,
{ 77: } 14,
{ 78: } 14,
{ 79: } 15,
{ 80: } 15,
{ 81: } 15,
{ 82: } 15,
{ 83: } 17,
{ 84: } 17,
{ 85: } 17,
{ 86: } 17,
{ 87: } 17,
{ 88: } 17,
{ 89: } 17,
{ 90: } 17,
{ 91: } 17,
{ 92: } 17,
{ 93: } 18,
{ 94: } 18,
{ 95: } 18,
{ 96: } 18,
{ 97: } 18,
{ 98: } 18,
{ 99: } 18,
{ 100: } 20,
{ 101: } 20,
{ 102: } 21,
{ 103: } 22,
{ 104: } 22,
{ 105: } 22,
{ 106: } 22,
{ 107: } 22,
{ 108: } 22,
{ 109: } 22,
{ 110: } 22,
{ 111: } 24,
{ 112: } 25,
{ 113: } 26,
{ 114: } 27,
{ 115: } 27,
{ 116: } 29,
{ 117: } 31,
{ 118: } 31,
{ 119: } 31,
{ 120: } 33,
{ 121: } 35,
{ 122: } 36
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 1,
{ 8: } 1,
{ 9: } 2,
{ 10: } 3,
{ 11: } 4,
{ 12: } 6,
{ 13: } 8,
{ 14: } 9,
{ 15: } 10,
{ 16: } 11,
{ 17: } 12,
{ 18: } 12,
{ 19: } 12,
{ 20: } 12,
{ 21: } 12,
{ 22: } 12,
{ 23: } 12,
{ 24: } 12,
{ 25: } 12,
{ 26: } 13,
{ 27: } 13,
{ 28: } 13,
{ 29: } 13,
{ 30: } 13,
{ 31: } 13,
{ 32: } 13,
{ 33: } 13,
{ 34: } 13,
{ 35: } 13,
{ 36: } 13,
{ 37: } 13,
{ 38: } 13,
{ 39: } 13,
{ 40: } 13,
{ 41: } 13,
{ 42: } 13,
{ 43: } 14,
{ 44: } 14,
{ 45: } 14,
{ 46: } 14,
{ 47: } 14,
{ 48: } 14,
{ 49: } 14,
{ 50: } 14,
{ 51: } 14,
{ 52: } 14,
{ 53: } 14,
{ 54: } 14,
{ 55: } 14,
{ 56: } 14,
{ 57: } 14,
{ 58: } 14,
{ 59: } 14,
{ 60: } 14,
{ 61: } 15,
{ 62: } 15,
{ 63: } 15,
{ 64: } 15,
{ 65: } 15,
{ 66: } 15,
{ 67: } 15,
{ 68: } 15,
{ 69: } 15,
{ 70: } 15,
{ 71: } 15,
{ 72: } 15,
{ 73: } 15,
{ 74: } 15,
{ 75: } 15,
{ 76: } 15,
{ 77: } 15,
{ 78: } 15,
{ 79: } 15,
{ 80: } 16,
{ 81: } 16,
{ 82: } 16,
{ 83: } 16,
{ 84: } 18,
{ 85: } 18,
{ 86: } 18,
{ 87: } 18,
{ 88: } 18,
{ 89: } 18,
{ 90: } 18,
{ 91: } 18,
{ 92: } 18,
{ 93: } 18,
{ 94: } 19,
{ 95: } 19,
{ 96: } 19,
{ 97: } 19,
{ 98: } 19,
{ 99: } 19,
{ 100: } 19,
{ 101: } 21,
{ 102: } 21,
{ 103: } 22,
{ 104: } 23,
{ 105: } 23,
{ 106: } 23,
{ 107: } 23,
{ 108: } 23,
{ 109: } 23,
{ 110: } 23,
{ 111: } 23,
{ 112: } 25,
{ 113: } 26,
{ 114: } 27,
{ 115: } 28,
{ 116: } 28,
{ 117: } 30,
{ 118: } 32,
{ 119: } 32,
{ 120: } 32,
{ 121: } 34,
{ 122: } 36
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 0,
{ 7: } 0,
{ 8: } 1,
{ 9: } 2,
{ 10: } 3,
{ 11: } 5,
{ 12: } 7,
{ 13: } 8,
{ 14: } 9,
{ 15: } 10,
{ 16: } 11,
{ 17: } 11,
{ 18: } 11,
{ 19: } 11,
{ 20: } 11,
{ 21: } 11,
{ 22: } 11,
{ 23: } 11,
{ 24: } 11,
{ 25: } 12,
{ 26: } 12,
{ 27: } 12,
{ 28: } 12,
{ 29: } 12,
{ 30: } 12,
{ 31: } 12,
{ 32: } 12,
{ 33: } 12,
{ 34: } 12,
{ 35: } 12,
{ 36: } 12,
{ 37: } 12,
{ 38: } 12,
{ 39: } 12,
{ 40: } 12,
{ 41: } 12,
{ 42: } 13,
{ 43: } 13,
{ 44: } 13,
{ 45: } 13,
{ 46: } 13,
{ 47: } 13,
{ 48: } 13,
{ 49: } 13,
{ 50: } 13,
{ 51: } 13,
{ 52: } 13,
{ 53: } 13,
{ 54: } 13,
{ 55: } 13,
{ 56: } 13,
{ 57: } 13,
{ 58: } 13,
{ 59: } 13,
{ 60: } 14,
{ 61: } 14,
{ 62: } 14,
{ 63: } 14,
{ 64: } 14,
{ 65: } 14,
{ 66: } 14,
{ 67: } 14,
{ 68: } 14,
{ 69: } 14,
{ 70: } 14,
{ 71: } 14,
{ 72: } 14,
{ 73: } 14,
{ 74: } 14,
{ 75: } 14,
{ 76: } 14,
{ 77: } 14,
{ 78: } 14,
{ 79: } 15,
{ 80: } 15,
{ 81: } 15,
{ 82: } 15,
{ 83: } 17,
{ 84: } 17,
{ 85: } 17,
{ 86: } 17,
{ 87: } 17,
{ 88: } 17,
{ 89: } 17,
{ 90: } 17,
{ 91: } 17,
{ 92: } 17,
{ 93: } 18,
{ 94: } 18,
{ 95: } 18,
{ 96: } 18,
{ 97: } 18,
{ 98: } 18,
{ 99: } 18,
{ 100: } 20,
{ 101: } 20,
{ 102: } 21,
{ 103: } 22,
{ 104: } 22,
{ 105: } 22,
{ 106: } 22,
{ 107: } 22,
{ 108: } 22,
{ 109: } 22,
{ 110: } 22,
{ 111: } 24,
{ 112: } 25,
{ 113: } 26,
{ 114: } 27,
{ 115: } 27,
{ 116: } 29,
{ 117: } 31,
{ 118: } 31,
{ 119: } 31,
{ 120: } 33,
{ 121: } 35,
{ 122: } 36
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 5,
{ 3: } 8,
{ 4: } 13,
{ 5: } 15,
{ 6: } 20,
{ 7: } 22,
{ 8: } 27,
{ 9: } 27,
{ 10: } 29,
{ 11: } 33,
{ 12: } 33,
{ 13: } 33,
{ 14: } 36,
{ 15: } 42,
{ 16: } 44,
{ 17: } 49,
{ 18: } 51,
{ 19: } 55,
{ 20: } 56,
{ 21: } 57,
{ 22: } 59,
{ 23: } 61,
{ 24: } 64,
{ 25: } 66,
{ 26: } 66,
{ 27: } 72,
{ 28: } 76,
{ 29: } 82,
{ 30: } 84,
{ 31: } 86,
{ 32: } 91,
{ 33: } 92,
{ 34: } 93,
{ 35: } 96,
{ 36: } 97,
{ 37: } 98,
{ 38: } 99,
{ 39: } 102,
{ 40: } 105,
{ 41: } 109,
{ 42: } 113,
{ 43: } 113,
{ 44: } 114,
{ 45: } 115,
{ 46: } 116,
{ 47: } 118,
{ 48: } 119,
{ 49: } 120,
{ 50: } 121,
{ 51: } 122,
{ 52: } 125,
{ 53: } 128,
{ 54: } 133,
{ 55: } 136,
{ 56: } 139,
{ 57: } 142,
{ 58: } 143,
{ 59: } 144,
{ 60: } 145,
{ 61: } 145,
{ 62: } 146,
{ 63: } 147,
{ 64: } 148,
{ 65: } 150,
{ 66: } 153,
{ 67: } 156,
{ 68: } 159,
{ 69: } 161,
{ 70: } 164,
{ 71: } 167,
{ 72: } 170,
{ 73: } 173,
{ 74: } 174,
{ 75: } 175,
{ 76: } 176,
{ 77: } 177,
{ 78: } 178,
{ 79: } 180,
{ 80: } 180,
{ 81: } 183,
{ 82: } 186,
{ 83: } 189,
{ 84: } 189,
{ 85: } 192,
{ 86: } 195,
{ 87: } 198,
{ 88: } 200,
{ 89: } 201,
{ 90: } 203,
{ 91: } 205,
{ 92: } 206,
{ 93: } 207,
{ 94: } 207,
{ 95: } 210,
{ 96: } 213,
{ 97: } 216,
{ 98: } 219,
{ 99: } 222,
{ 100: } 224,
{ 101: } 224,
{ 102: } 226,
{ 103: } 226,
{ 104: } 226,
{ 105: } 228,
{ 106: } 229,
{ 107: } 232,
{ 108: } 234,
{ 109: } 236,
{ 110: } 239,
{ 111: } 242,
{ 112: } 242,
{ 113: } 242,
{ 114: } 242,
{ 115: } 242,
{ 116: } 244,
{ 117: } 244,
{ 118: } 244,
{ 119: } 246,
{ 120: } 249,
{ 121: } 249,
{ 122: } 249
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 4,
{ 2: } 7,
{ 3: } 12,
{ 4: } 14,
{ 5: } 19,
{ 6: } 21,
{ 7: } 26,
{ 8: } 26,
{ 9: } 28,
{ 10: } 32,
{ 11: } 32,
{ 12: } 32,
{ 13: } 35,
{ 14: } 41,
{ 15: } 43,
{ 16: } 48,
{ 17: } 50,
{ 18: } 54,
{ 19: } 55,
{ 20: } 56,
{ 21: } 58,
{ 22: } 60,
{ 23: } 63,
{ 24: } 65,
{ 25: } 65,
{ 26: } 71,
{ 27: } 75,
{ 28: } 81,
{ 29: } 83,
{ 30: } 85,
{ 31: } 90,
{ 32: } 91,
{ 33: } 92,
{ 34: } 95,
{ 35: } 96,
{ 36: } 97,
{ 37: } 98,
{ 38: } 101,
{ 39: } 104,
{ 40: } 108,
{ 41: } 112,
{ 42: } 112,
{ 43: } 113,
{ 44: } 114,
{ 45: } 115,
{ 46: } 117,
{ 47: } 118,
{ 48: } 119,
{ 49: } 120,
{ 50: } 121,
{ 51: } 124,
{ 52: } 127,
{ 53: } 132,
{ 54: } 135,
{ 55: } 138,
{ 56: } 141,
{ 57: } 142,
{ 58: } 143,
{ 59: } 144,
{ 60: } 144,
{ 61: } 145,
{ 62: } 146,
{ 63: } 147,
{ 64: } 149,
{ 65: } 152,
{ 66: } 155,
{ 67: } 158,
{ 68: } 160,
{ 69: } 163,
{ 70: } 166,
{ 71: } 169,
{ 72: } 172,
{ 73: } 173,
{ 74: } 174,
{ 75: } 175,
{ 76: } 176,
{ 77: } 177,
{ 78: } 179,
{ 79: } 179,
{ 80: } 182,
{ 81: } 185,
{ 82: } 188,
{ 83: } 188,
{ 84: } 191,
{ 85: } 194,
{ 86: } 197,
{ 87: } 199,
{ 88: } 200,
{ 89: } 202,
{ 90: } 204,
{ 91: } 205,
{ 92: } 206,
{ 93: } 206,
{ 94: } 209,
{ 95: } 212,
{ 96: } 215,
{ 97: } 218,
{ 98: } 221,
{ 99: } 223,
{ 100: } 223,
{ 101: } 225,
{ 102: } 225,
{ 103: } 225,
{ 104: } 227,
{ 105: } 228,
{ 106: } 231,
{ 107: } 233,
{ 108: } 235,
{ 109: } 238,
{ 110: } 241,
{ 111: } 241,
{ 112: } 241,
{ 113: } 241,
{ 114: } 241,
{ 115: } 243,
{ 116: } 243,
{ 117: } 243,
{ 118: } 245,
{ 119: } 248,
{ 120: } 248,
{ 121: } 248,
{ 122: } 250
);


var yyn : Integer;

label start, scan, action;

begin

start:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  if yyfind(yyrule) then
    begin
      yyaction(yyrule);
      if yyreject then goto action;
    end
  else if not yydefault and yywrap then
    begin
      yyclear;
      return(0);
    end;

  if not yydone then goto start;

  yylex := yyretval;

end(*yylex*);



procedure yyprintln(str: string);
begin
  if str <> '' then
    Write(yyoutput, str);
  writeln(yyoutput);
end;

procedure PrintError(msg: string);
var
  fulltext : string;
begin
  fulltext := filename + '('+ inttostr(yylineno) + '):' + msg;
  writeln(fulltext);
  halt(1);
end;

function enabled: Boolean;
begin
  result := _enabled[stack_pos];
end;

procedure _define(val: string);
begin
  if not enabled then exit;
  defined.values[val] := 'TRUE';
  yyprintln('');
end;

procedure _undef(val: string);
begin
  if not enabled then exit;
  defined.values[val] := '';
  yyprintln('');
end;

procedure _ifdef(val: string);
begin
  inc(stack_pos);
  _enabled[stack_pos] := (defined.values[val] = 'TRUE') and _enabled[stack_pos-1];
  yyprintln('');
end;

procedure _if(val: string);
begin
//  inc(stack_pos);
  writeln(val);
  readln;
//  _enabled[stack_pos] := (defined.values[val] = 'TRUE') and _enabled[stack_pos-1];
  yyprintln('');
end;



procedure _ifndef(val: string);
begin
  inc(stack_pos);
  _enabled[stack_pos] := (defined.values[val] = '') and _enabled[stack_pos-1];
  yyprintln('');
end;

procedure _else;
begin
  _enabled[stack_pos] := not _enabled[stack_pos];
  if not _enabled[stack_pos-1] then _enabled[stack_pos]:=false;
  yyprintln('');
end;

procedure _endif;
begin
  dec(stack_pos);
//  writeln(stack_pos);
  yyprintln('');
end;

procedure _print;
begin
  if enabled then
     put_char(yytext[1]);
end;

procedure include_file(const fname: string; local: boolean);
var
  i : longint;
  found: Boolean;
  s: string;
  old_yyline  : String;
  old_yylineno, old_yycolno : Integer;
  old_yytext  : ShortString;
  old_yyleng  : Byte;
  old_yystate    : Integer;
  old_yyactchar  : Char;
  old_yylastchar : Char;
  old_yyrule     : Integer;
  old_yyreject   : Boolean;
  old_yydone     : Boolean;
  old_yyretval   : Integer;
  old_filename,real_file_name : string;

  function _ExtractFilePath(path: string): string;
  var
    I: Integer;
  begin
    I := LastDelimiter('\:/', FileName);
    Result := Copy(FileName, 1, I);
  end;

  function _IncludeTrailingBackslash(path: string): string;
  begin
    result := path;
    if trim(path) = '' then exit;
    if (path[Length(path)] <> '/') and (path[Length(path)] <> '\') then
      result := path + '\'
  end;

begin
  if not enabled then
    begin
      yyprintln('');
      exit;
    end;
  real_file_name := fname;
  if not fileexists(fname) then
    begin
      if local then
        begin
          real_file_name := _IncludeTrailingBackslash(_ExtractFilePath(filename))+fname;
          if not FileExists(real_file_name) then begin
            //PrintError('file not found "'+fname+'"');
          found := false;
          for i := 0 to pred(includes.count) do
            begin
              real_file_name := _IncludeTrailingBackslash(includes[i])+fname;
              if fileexists(real_file_name) then
                begin
                  found := true;
                  break;
                end;
            end;
          if not found then
            PrintError('file not found "'+fname+'"');
          end;
        end
      else
        begin
          found := false;
          for i := 0 to pred(includes.count) do
            begin
              real_file_name := _IncludeTrailingBackslash(includes[i])+fname;
              if fileexists(real_file_name) then
                begin
                  found := true;
                  break;
                end;
            end;
          if not found then
            PrintError('file not found "'+fname+'"')
        end;
    end;
  close(yyinput);
  old_yyline  := yyline;
  old_yylineno := yylineno;
  old_yycolno := yycolno;
  old_yytext  := yytext;
  old_yyleng  := yyleng;
  old_yystate  := yystate;
  old_yyactchar  := yyactchar;
  old_yylastchar := yylastchar;
  old_yyrule     := yyrule;
  old_yyreject   := yyreject;
  old_yydone     := yydone;
  old_yyretval   := yyretval;
  old_filename := filename;
  Assign(yyinput, real_file_name);
  Reset(yyinput);
  try
    filename := real_file_name;
    yylineno := 0;
    yycolno := 0;
    yystate := 0;
    yyclear;
    yyprintln('#line 1 "'+filename+'"');
    yylex;
  finally
    yyclear;
    filename := old_filename;
    assign(yyinput, old_filename);
    reset(yyinput);
    for i:=1 to old_yylineno do readln(yyinput, s);
    yyline  := old_yyline;
    yylineno := old_yylineno;
    yycolno := old_yycolno;
    yytext  := old_yytext;
    yyleng  := old_yyleng;
    yystate  := old_yystate;
    yyactchar  := old_yyactchar;
    yylastchar := old_yylastchar;
    yyrule     := old_yyrule;
    yyreject   := old_yyreject;
    yydone     := old_yydone;
    yyretval   := old_yyretval;
    assign(yyoutput, '');
    rewrite(yyoutput);
    yyprintln('#line '+inttostr(yylineno+1)+' "'+filename+'"');
    start(0);
  end;
end;

initialization
  includes := TStringList.Create;
  defined  := TStringList.Create;
  stack_pos := 0;
  _enabled[stack_pos] := true;
  disabled_at := -1;
finalization
  includes.free;
  defined.free;
end.
